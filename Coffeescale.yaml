##smart scale auto tare code copied from https://github.com/markusressel/ESPHome-Smart-Scale

substitutions:
  shortmax: id(shormax).state
  longmin: id(longmin).state
  longmax: id(longmin).state
esphome:
  name: scaleesp32screen

esp32:
  board: heltec_wifi_kit_32
  framework:
    type: arduino
globals:
  - id: beanweight
    type: float
    restore_value: yes
  
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '-107606'
    
  - id: auto_tare_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: auto_tare_difference
    type: float
    restore_value: yes
    initial_value: '0'
    
# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:

ota:
  password: "XXXXXXXXXXXXXXXX"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.66
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Scaleesp32Screen"
    password: "XXXXXXXX"

captive_portal:

i2c:
  sda: 4
  scl: 15
  frequency: 400kHz
time:
  - platform: homeassistant
    id: currtime
 
font:
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font25
    size: 25
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font15
    size: 15
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font10
    size: 10
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font5
    size: 5
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font12
    size: 12
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: screen
    reset_pin: 16
    address: 0x3C
    contrast: 50%
    update_interval: .1s
    rotation: 180Â°
    pages:
      - id: page1
        lambda: |-
          it.printf(5, 20, id(font25), "%.0f grams", id(knob).state); 
          it.strftime(1, 0, id(font15),  "%a %m/%d %I:%M", id(currtime).now());
      - id: page2
        lambda: it.fill(COLOR_OFF);
      - id: page3
        lambda: |-
          it.printf(64, 10, id(font15), TextAlign::TOP_CENTER, "GRIND");
          it.printf(64, 35, id(font15), TextAlign::TOP_CENTER, "THEM BEANS");

interval:
  - interval: 300s
    then:
      - display.page.show: page2
      - component.update: screen




button:
  - platform: restart
    name: Scale Restart
  - platform: template
    id: smart_scale_manual_tare_action_switch
    name: "Smart Scale Manual Tare Action"
    icon: mdi:scale-balance
    on_press:
      - lambda: |-
          id(auto_tare_difference) = id(initial_zero) - id(smart_scale_hx711_value_raw).state;

switch:
  ## Switch to enable/disable the auto tare feature
  - platform: template
    id: smart_scale_continuous_tare_enabled
    name: "Smart Scale Continuous Tare Enabled"
    lambda: |-
      return id(auto_tare_enabled);
    turn_on_action:
      - lambda: |-
          id(auto_tare_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(auto_tare_enabled) = false;
sensor:
  - platform: template
    id: smart_scale_initial_zero
    name: "Smart Scale Initial Zero"
    lambda: |-
      return id(initial_zero);
    update_interval: 1s
    
  - platform: template
    id: smart_scale_auto_tare_difference
    name: "Smart Scale Auto Tare Difference"
    lambda: |-
      return id(auto_tare_difference);
    update_interval: 1s
    
  # sensors imported from home assistant
  - platform: homeassistant
    id: homeassistant_initial_zero
    entity_id: input_number.smart_scale_initial_zero
    on_value:
      then:
        - lambda: |-
            id(initial_zero) = x;
  - platform: hx711
    name: "actualweight"
    dout_pin: GPIO23
    clk_pin: GPIO18
    gain: 128
    id: smart_scale_hx711_value_raw
    internal: True
    unit_of_measurement: g
    accuracy_decimals: 1
    update_interval: 125ms
    filters:
      - sliding_window_moving_average:
          window_size: 3 
          send_every: 1
      
    on_value:
      then:
        - sensor.template.publish:
            id: smart_scale_hx711_value
            state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              and:
                - lambda: 'return id(auto_tare_enabled);'
                # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
                - lambda: 'return id(smart_scale_hx711_value).state < 10.0;'
            then:
              - if:
                  condition:
                    # current raw scale value is below expected zero value
                    - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
                  then:
                    # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) += 10;
                  else:
                    # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) -= 10;  
      

          
  - platform: template
    id: smart_scale_hx711_value
    name: "Smart Scale HX711 Value"
    internal: False
    filters:
      # apply auto_tare difference
      - lambda: 'return x + id(auto_tare_difference);'
      # apply rough calibration
      - calibrate_linear:
        # retrieve these values by evaluating the raw values with loads of known mass.          # note that a bigger difference between measurements usually results in higher resolution,
          # so measure 0 Kg and the highest known mass you have (like f.ex. your own weight, measured by a normal scale with good accuracy)
        - -107606 -> 0
          #- -80466 -> 144
        - -168283 -> 157  
      # map values below 0.1 to 0 (to decrease value changes due to random fluctuation)
      - lambda: |-
          if (x <= 0.1) {
            return 0.0;
          } else {
            return x;
          }
          
    unit_of_measurement: g
    accuracy_decimals: 2
    update_interval: 0.25s
    #on_value_range: 
     # - above: 20
      #  then: 
       #   - homeassistant.service: 
        #      service: homeassistant.turn_off
         #     data:
          #      entity_id: switch.grinder
  ##Rotary Encoder Section##  
  - platform: rotary_encoder
    name: "Beans"
    id: knob
    publish_initial_value: True
    pin_a: 
      number: 13
      mode:
        input: true
        pullup: true
    pin_b: 
      number: 14
      mode:
        input: true
        pullup: true
    pin_reset: 27
    restore_mode: RESTORE_DEFAULT_ZERO
    on_clockwise:
      then:
        - lambda: id(beanweight) += 1;
    on_anticlockwise:
      then:
        - lambda: id(beanweight) -= 1;   
  - platform: homeassistant
    name: singleclickshortmax
    entity_id: input_number.singleclickmax
    id: shortmax
  - platform: homeassistant
    name: singleclicklongmin
    entity_id: input_number.singleclicklongmin
    id: longmin
  - platform: homeassistant
    name: singleclicklongmax
    entity_id: input_number.singleclicklongmax
    id: longmax
#  - platform: homeassistant
#    id: pirid
#    entity_id: binary_sensor.pir_sensor
#    internal: true
#    on_value:
#      then:
#        - display.page.show: !lambda |-
#                                      if (id(pirid).state == "off") {
#                                        return id(page2);
#                                      } else {
#                                        return id(page1);
#                                      }
binary_sensor:
#  - platform: gpio
#    pin: 
#      number: 2
#      inverted: true
#    name: "PIR Sensor"
#    device_class: motion
#    id: pir
- platform: gpio
  pin:
    number: GPIO17
    mode: INPUT_PULLUP
    inverted: True
  name: Button
  on_click:
    - min_length: 1ms
      max_length: 400ms
      then:
        - if:
            condition:
              display.is_displaying_page: page2
            then:
             display.page.show: page1
            else:
              display.page.show: page2
    - min_length: 500ms
      max_length: 5s 
      then:
        - homeassistant.service: 
            service: homeassistant.turn_on
            data:
              entity_id: switch.grinder
        - display.page.show: page3


